{"tagline":"Go! OOP&AOP PHP framework","body":"## Общая информация\r\n\r\nДобро пожаловать на сайт проекта Go!\r\n\r\nЭтот проект представляет собой попытку портировать аспектно-ориентированную методологию из мира Java на PHP. Не секрет, что аспектно-ориентированное программирование (АОП), да и сама методология в Java существует уже доброе десятилетие благогдаря талантливым инженерам исследовательского центра Xerox PARC под руководством Грегора Кичалеса (Gregor Kiczales). Ими же было разработано аспектно-ориентированное расширение для языка Java, получившее название AspectJ — (2001 год). Несмотря на то, что эта концепция используется в Java довольно давно и предпринимались неоднократные попытки портировать эту методологию на PHP, особых успехов достигнуто не было и все проекты остановились в развитии. Однако у меня было несколько интересных идей, реализация которых позволила сделать эту библиотеку на PHP.\r\n\r\n## Предыстория\r\n\r\nРазработка больших программ подразумевает написание большого объема кода, в котором нужно уметь разбираться и править нужные места. Со временем количество кода растет, простые и понятные места становятся все запутанней и сложней, поэтому возникло законное желание как-то организовывать логически весь код. В итоге совместными усилиями была разработана добрая десятка парадигм программирования, которые стандартизовали подход к разработке кода.\r\n\r\n### Объектно-ориентированное программирование\r\n\r\nОдной из наиболее удачных парадигм считается объектно-ориентированное программирование, основой которой являются объекты и взаимосвязь между ними. Первым языком программирования, в котором были предложены принципы объектной ориентированности, была Симула. В момент своего появления (в 1967 году), этот язык программирования предложил поистине революционные идеи: объекты, классы, виртуальные методы и др., однако это всё не было воспринято современниками как нечто грандиозное. Тем не менее, большинство концепций были развиты Аланом Кэйем и Дэном Ингаллсом в языке Smalltalk. Именно он стал первым широко распространённым объектно-ориентированным языком программирования. Позже появились многочисленные реализации языков программирования, поддерживающих ООП, благодаря удобной работе с кодом.\r\n\r\nПарадигма ООП базируется на следующих принципах:\r\n\r\n* **Абстракция** Абстрагирование — это способ выделить набор значимых характеристик объекта, исключая из рассмотрения незначимые. Соответственно, абстракция — это набор всех таких характеристик.\r\n* **Инкапсуляция** — это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали реализации от пользователя.\r\n* **Наследование** — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником или производным классом.\r\n* **Полиморфизм** — это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.\r\n\r\nОсновными элементами ООП традиционно являются:\r\n* **Класс** — является описываемой на языке терминологии (пространства имён) исходного кода моделью ещё не существующей сущности (объекта). Фактически он описывает устройство объекта, являясь своего рода чертежом. Говорят, что объект — это экземпляр класса. При этом в некоторых исполняющих системах класс также может представляться некоторым объектом при выполнении программы посредством динамической идентификации типа данных. Обычно классы разрабатывают таким образом, чтобы их объекты соответствовали объектам предметной области.\r\n* **Объект** — это сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса или копирования прототипа (например, после запуска результатов компиляции и связывания исходного кода на выполнение).\r\n* **Прототип** — это объект-образец, по образу и подобию которого создаются другие объекты. Объекты-копии могут сохранять связь с родительским объектом, автоматически наследуя изменения в прототипе; эта особенность определяется в рамках конкретного языка. \r\n\r\nТаким образом, программа представляет собой набор объектов, имеющих состояние и поведение. Объекты взаимодействуют посредством сообщений. Естественным образом выстраивается иерархия объектов: программа в целом — это объект, для выполнения своих функций она обращается к входящим в неё объектам, которые, в свою очередь, выполняют запрошенное путём обращения к другим объектам программы. Естественно, чтобы избежать бесконечной рекурсии в обращениях, на каком-то этапе объект трансформирует обращённое к нему сообщение в сообщения к стандартным системным объектам, предоставляемым языком и средой программирования.\r\n\r\nУстойчивость и управляемость системы обеспечивается за счёт чёткого разделения ответственности объектов (за каждое действие отвечает определённый объект), однозначного определения интерфейсов межобъектного взаимодействия и полной изолированности внутренней структуры объекта от внешней среды (инкапсуляции).\r\n\r\nОднако, некоторую функциональность с помощью предложенных методов невозможно выделить в отдельные сущности. Такую функциональность называют сквозной (англ. scattered, разбросанная или tangled, переплетённая), так как её реализация рассыпана по различным модулям программы. Сквозная функциональность приводит к рассредоточенному и запутанному коду, сложному для понимания и сопровождения.\r\n\r\nВедение лога и обработка ошибок — типичные примеры сквозной функциональности. Другие примеры: трассировка; авторизация и проверка прав доступа; контрактное программирование (в частности, проверка пред- и постусловий). Для программы, написанной в парадигме ООП, любая функциональность, по которой не была проведена декомпозиция, является сквозной.\r\n\r\nСамое время для аспектно-ориентированного программирования!\r\n\r\n### Аспектно-ориентированное программирование\r\n\r\nАспектно-ориентированное программирование оперирует аспектами - модулями или классами, реализующими сквозную функциональность. Аспект изменяет поведение остального кода, применяя совет в точках соединения, определённых некоторым срезом. \r\n\r\nОсновная идея аспектов - вынести повторяющийся код (совет) из методов объектов в отдельный модуль и указать те точки, где этот метод должен применяться. Надо логирование во всех методах - отлично, пишем код на несколько строк и указываем, что этот метод надо применить перед всеми методами во всех классах.\r\n\r\nОсновные понятия АОП:\r\n\r\n* **Аспект** (англ. aspect) — модуль или класс, реализующий сквозную функциональность. Аспект изменяет поведение остального кода, применяя совет в точках соединения, определённых некоторым срезом.\r\n* **Совет** (англ. advice) — средство оформления кода, который должен быть вызван из точки соединения. Совет может быть выполнен до, после или вместо точки соединения.\r\n* **Точка соединения** (англ. join point) — точка в выполняемой программе, где следует применить совет. Многие реализации АОП позволяют использовать вызовы методов и обращения к полям объекта в качестве точек соединения.\r\n* **Срез** (англ. pointcut) — набор точек соединения. Срез определяет, подходит ли данная точка соединения к данному совету. Самые удобные реализации АОП используют для определения срезов синтаксис основного языка (например, в AspectJ применяются Java-сигнатуры) и позволяют их повторное использование с помощью переименования и комбинирования.\r\n* **Внедрение** (англ. introduction, введение) — изменение структуры класса и/или изменение иерархии наследования для добавления функциональности аспекта в инородный код. Обычно реализуется с помощью некоторого метаобъектного протокола (англ. metaobject protocol, MOP).\r\n\r\nАОП базируется на принципе \"вплетения\" кода. Процесс «вплетения» может происходить на уровне исходных кодов или же на уровне виртуальной машины.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Go-aop-php"}